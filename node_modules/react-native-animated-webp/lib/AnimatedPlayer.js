"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_fast_image_1 = tslib_1.__importDefault(require("react-native-fast-image"));
const isPlatformAndroid = react_native_1.Platform.OS === 'android';
const AnimatedPlayer = react_1.forwardRef(({ thumbnailSource, animatedSource, duration = 0, style = {}, delay = 0, autoplay = false, loop = false }, ref) => {
    const [isPlaying, setIsPlaying] = react_1.useState(false);
    const [playIntervalID, setPlayIntervalID] = react_1.useState(undefined);
    const [loopIntervalID, setLoopIntervalID] = react_1.useState(undefined);
    const currentSource = react_1.useMemo(() => isPlaying ? animatedSource : thumbnailSource, [isPlaying]);
    const play = (timeoutCallback) => {
        setIsPlaying(true);
        if (duration && duration > 0) {
            setPlayIntervalID(setTimeout(() => {
                setIsPlaying(false);
                if (timeoutCallback) {
                    timeoutCallback();
                }
            }, duration));
        }
    };
    const stop = () => {
        if (isPlaying) {
            clearTimeout(playIntervalID);
        }
        setIsPlaying(false);
    };
    react_1.useEffect(() => {
        if (autoplay) {
            play();
        }
        if (loop) {
            setLoopIntervalID(setInterval(play, delay + duration));
            return () => clearInterval(loopIntervalID);
        }
    }, [loop]);
    react_1.useImperativeHandle(ref, () => ({
        isPlaying,
        play,
        stop,
    }));
    if (isPlatformAndroid) {
        return (react_1.default.createElement(react_native_1.Image, { source: currentSource, style: style }));
    }
    return (react_1.default.createElement(react_native_fast_image_1.default, { source: currentSource, style: style }));
});
exports.default = AnimatedPlayer;
//# sourceMappingURL=AnimatedPlayer.js.map